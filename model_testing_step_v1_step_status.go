/*
testing-step

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TestingStepV1StepStatus the model 'TestingStepV1StepStatus'
type TestingStepV1StepStatus string

// List of testing-step-v1_StepStatus
const (
	COMPLETED TestingStepV1StepStatus = "Completed"
	FAILED TestingStepV1StepStatus = "Failed"
	READY TestingStepV1StepStatus = "Ready"
)

// All allowed values of TestingStepV1StepStatus enum
var AllowedTestingStepV1StepStatusEnumValues = []TestingStepV1StepStatus{
	"Completed",
	"Failed",
	"Ready",
}

func (v *TestingStepV1StepStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestingStepV1StepStatus(value)
	for _, existing := range AllowedTestingStepV1StepStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestingStepV1StepStatus", value)
}

// NewTestingStepV1StepStatusFromValue returns a pointer to a valid TestingStepV1StepStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestingStepV1StepStatusFromValue(v string) (*TestingStepV1StepStatus, error) {
	ev := TestingStepV1StepStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestingStepV1StepStatus: valid values are %v", v, AllowedTestingStepV1StepStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestingStepV1StepStatus) IsValid() bool {
	for _, existing := range AllowedTestingStepV1StepStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to testing-step-v1_StepStatus value
func (v TestingStepV1StepStatus) Ptr() *TestingStepV1StepStatus {
	return &v
}

type NullableTestingStepV1StepStatus struct {
	value *TestingStepV1StepStatus
	isSet bool
}

func (v NullableTestingStepV1StepStatus) Get() *TestingStepV1StepStatus {
	return v.value
}

func (v *NullableTestingStepV1StepStatus) Set(val *TestingStepV1StepStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTestingStepV1StepStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTestingStepV1StepStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestingStepV1StepStatus(val *TestingStepV1StepStatus) *NullableTestingStepV1StepStatus {
	return &NullableTestingStepV1StepStatus{value: val, isSet: true}
}

func (v NullableTestingStepV1StepStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestingStepV1StepStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

