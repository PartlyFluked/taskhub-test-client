/*
testing-step

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StepType the model 'StepType'
type StepType string

// List of StepType
const (
	TESTING_STEP_V1 StepType = "testing-step-v1"
)

// All allowed values of StepType enum
var AllowedStepTypeEnumValues = []StepType{
	"testing-step-v1",
}

func (v *StepType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StepType(value)
	for _, existing := range AllowedStepTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StepType", value)
}

// NewStepTypeFromValue returns a pointer to a valid StepType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStepTypeFromValue(v string) (*StepType, error) {
	ev := StepType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StepType: valid values are %v", v, AllowedStepTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StepType) IsValid() bool {
	for _, existing := range AllowedStepTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StepType value
func (v StepType) Ptr() *StepType {
	return &v
}

type NullableStepType struct {
	value *StepType
	isSet bool
}

func (v NullableStepType) Get() *StepType {
	return v.value
}

func (v *NullableStepType) Set(val *StepType) {
	v.value = val
	v.isSet = true
}

func (v NullableStepType) IsSet() bool {
	return v.isSet
}

func (v *NullableStepType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepType(val *StepType) *NullableStepType {
	return &NullableStepType{value: val, isSet: true}
}

func (v NullableStepType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

