/*
testing-step

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StepStatus The status of a step (How far along is it in processing).
type StepStatus string

// List of StepStatus
const (
	NEW StepStatus = "New"
	READY StepStatus = "Ready"
	IN_PROGRESS StepStatus = "InProgress"
	COMPLETED StepStatus = "Completed"
	CANCELLED StepStatus = "Cancelled"
	FAILED StepStatus = "Failed"
)

// All allowed values of StepStatus enum
var AllowedStepStatusEnumValues = []StepStatus{
	"New",
	"Ready",
	"InProgress",
	"Completed",
	"Cancelled",
	"Failed",
}

func (v *StepStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StepStatus(value)
	for _, existing := range AllowedStepStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StepStatus", value)
}

// NewStepStatusFromValue returns a pointer to a valid StepStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStepStatusFromValue(v string) (*StepStatus, error) {
	ev := StepStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StepStatus: valid values are %v", v, AllowedStepStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StepStatus) IsValid() bool {
	for _, existing := range AllowedStepStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StepStatus value
func (v StepStatus) Ptr() *StepStatus {
	return &v
}

type NullableStepStatus struct {
	value *StepStatus
	isSet bool
}

func (v NullableStepStatus) Get() *StepStatus {
	return v.value
}

func (v *NullableStepStatus) Set(val *StepStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStepStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStepStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepStatus(val *StepStatus) *NullableStepStatus {
	return &NullableStepStatus{value: val, isSet: true}
}

func (v NullableStepStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

